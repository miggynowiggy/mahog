// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

  const moo = require("moo");
  //const IndentationLexer = require("moo-indentation-lexer")

  const lexer = moo.compile({
    id: "id",
    data_type: "dataType",
    constant: "constant",
    typecase: "typecast",
    object: "object",
    if_word: "if",
    elif: "elif",
    else_word: "else",
    cycle: "cycle",
    during: "during",
    output: "output",
    input: "input",
    control: "control",
    return_word: "return",
    trim: "trim",
    size: "size",
    null_word: "null",
    void_word: "void",
    arr_access: "arrAccess",
    str_access: "str_access",
    pos_access: "posAccess",
    comment: "comment",
    multiline: "multiline",

    comma: "comma",
    colon: "colon",
    period: "period",
    terminator: "terminator",

    L_paren: "LParen",
    R_paren: "RParen",
    L_curl: "LCurl",
    R_curl: "RCurl",
    L_sqr: "LSqr",
    R_sqr: "RSqr",

    nega_sign: "negaSign",
    add_assign_op: "addAssignOp",
    assign_only_op: "assignOnlyOp",
    assign_op: "assignOp",
    relate_op_bool: "relateOpBool",
    relate_op_num: "relateOpBoolNum",
    arith_op: "arithOp",
    add_op: "addOp",
    not_op: "notOp",
    or_op: "orOp",
    and_op: "andOp",
    unary: "unary",

    string_lit: "stringLit",
    bool_lit: "boolLit",
    nega_float_num_lit: "negaFloatNumLit",
    float_num_lit: "floatNumLit",
    nega_num_lit: "negaNumLit",
    num_lit: "numLit"
  });
var grammar = {
    Lexer: lexer,
    ParserRules: [
    {"name": "program", "symbols": ["statement"]},
    {"name": "statement", "symbols": ["desired_statement", "statement"]},
    {"name": "statement", "symbols": []},
    {"name": "desired_statement", "symbols": ["declare_data"]},
    {"name": "desired_statement", "symbols": ["const_declare"]},
    {"name": "desired_statement", "symbols": ["object_declare"]},
    {"name": "desired_statement", "symbols": ["void_declare"]},
    {"name": "desired_statement", "symbols": ["return_statement"]},
    {"name": "desired_statement", "symbols": ["loop_statement"]},
    {"name": "desired_statement", "symbols": ["expressions_noid"]},
    {"name": "desired_statement", "symbols": ["id_use"]},
    {"name": "declare_data", "symbols": ["data_id", "data_choices"]},
    {"name": "data_id", "symbols": [(lexer.has("data_type") ? {type: "data_type"} : data_type), (lexer.has("id") ? {type: "id"} : id)]},
    {"name": "data_choices", "symbols": [(lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "data_choices", "symbols": ["function_dec"]},
    {"name": "data_choices", "symbols": [(lexer.has("assign_only_op") ? {type: "assign_only_op"} : assign_only_op), "expressions", (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "operators", "symbols": [(lexer.has("relate_op_bool") ? {type: "relate_op_bool"} : relate_op_bool)]},
    {"name": "operators", "symbols": [(lexer.has("relate_op_num") ? {type: "relate_op_num"} : relate_op_num)]},
    {"name": "operators", "symbols": [(lexer.has("arith_op") ? {type: "arith_op"} : arith_op)]},
    {"name": "operators", "symbols": [(lexer.has("add_op") ? {type: "add_op"} : add_op)]},
    {"name": "operators", "symbols": [(lexer.has("or_op") ? {type: "or_op"} : or_op)]},
    {"name": "operators", "symbols": [(lexer.has("and_op") ? {type: "and_op"} : and_op)]},
    {"name": "expressions", "symbols": ["data_nonfunction", "expression_yes"]},
    {"name": "expressions", "symbols": []},
    {"name": "more_not", "symbols": [(lexer.has("not_op") ? {type: "not_op"} : not_op), "more_not"]},
    {"name": "more_not", "symbols": []},
    {"name": "grouping", "symbols": ["bool_operand", "additional_bool"]},
    {"name": "grouping", "symbols": ["num_operand", "additional_num"]},
    {"name": "expressions_noid", "symbols": ["data_nonfunction_noid", "expression_yes", (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "data_nonfunction_noid", "symbols": ["literals"]},
    {"name": "data_nonfunction_noid", "symbols": [(lexer.has("L_paren") ? {type: "L_paren"} : L_paren), "expressions", (lexer.has("R_paren") ? {type: "R_paren"} : R_paren)]},
    {"name": "data_nonfunction_noid", "symbols": [(lexer.has("not_op") ? {type: "not_op"} : not_op), "more_not", "data_nonfunction"]},
    {"name": "data_nonfunction", "symbols": ["literals"]},
    {"name": "data_nonfunction", "symbols": ["ids"]},
    {"name": "data_nonfunction", "symbols": [(lexer.has("L_paren") ? {type: "L_paren"} : L_paren), "expressions", (lexer.has("R_paren") ? {type: "R_paren"} : R_paren)]},
    {"name": "data_nonfunction", "symbols": [(lexer.has("not_op") ? {type: "not_op"} : not_op), "more_not", "data_nonfunction"]},
    {"name": "expression_yes", "symbols": ["operators", "expressions"]},
    {"name": "expression_yes", "symbols": []},
    {"name": "const_declare", "symbols": ["const_start", (lexer.has("assign_only_op") ? {type: "assign_only_op"} : assign_only_op), "literals", (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "const_start", "symbols": [(lexer.has("constant") ? {type: "constant"} : constant), (lexer.has("id") ? {type: "id"} : id)]},
    {"name": "object_declare", "symbols": ["object_id", "object_choice"]},
    {"name": "object_choice", "symbols": [(lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "object_choice", "symbols": [(lexer.has("assign_only_op") ? {type: "assign_only_op"} : assign_only_op), "object_wrapper", (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "object_id", "symbols": [(lexer.has("object") ? {type: "object"} : object), (lexer.has("id") ? {type: "id"} : id)]},
    {"name": "object_wrapper", "symbols": [(lexer.has("L_curl") ? {type: "L_curl"} : L_curl), "object_content", (lexer.has("R_curl") ? {type: "R_curl"} : R_curl)]},
    {"name": "object_content", "symbols": ["data_id", (lexer.has("colon") ? {type: "colon"} : colon), "data_nonfunction", "append_property"]},
    {"name": "object_content", "symbols": []},
    {"name": "append_property", "symbols": [(lexer.has("comma") ? {type: "comma"} : comma), "object_content"]},
    {"name": "append_property", "symbols": []},
    {"name": "assign_op", "symbols": [(lexer.has("assign_op") ? {type: "assign_op"} : assign_op)]},
    {"name": "assign_op", "symbols": [(lexer.has("assign_only_op") ? {type: "assign_only_op"} : assign_only_op)]},
    {"name": "assign_op", "symbols": [(lexer.has("add_assign_op") ? {type: "add_assign_op"} : add_assign_op)]},
    {"name": "literals", "symbols": ["num_literals"]},
    {"name": "literals", "symbols": [(lexer.has("string_lit") ? {type: "string_lit"} : string_lit)]},
    {"name": "literals", "symbols": [(lexer.has("bool_lit") ? {type: "bool_lit"} : bool_lit)]},
    {"name": "num_literals", "symbols": [(lexer.has("nega_float_num_lit") ? {type: "nega_float_num_lit"} : nega_float_num_lit)]},
    {"name": "num_literals", "symbols": [(lexer.has("float_num_lit") ? {type: "float_num_lit"} : float_num_lit)]},
    {"name": "num_literals", "symbols": [(lexer.has("nega_num_lit") ? {type: "nega_num_lit"} : nega_num_lit)]},
    {"name": "num_literals", "symbols": [(lexer.has("num_lit") ? {type: "num_lit"} : num_lit)]},
    {"name": "id_use", "symbols": [(lexer.has("id") ? {type: "id"} : id), "assign_choice", (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "assign_choice", "symbols": ["assign_op", "expressions"]},
    {"name": "assign_choice", "symbols": ["function_call"]},
    {"name": "assign_choice", "symbols": ["expression_yes"]},
    {"name": "array_literal", "symbols": [(lexer.has("L_sqr") ? {type: "L_sqr"} : L_sqr), "array_contents", (lexer.has("R_sqr") ? {type: "R_sqr"} : R_sqr)]},
    {"name": "array_contents", "symbols": ["literals", "append_element"]},
    {"name": "array_contents", "symbols": [(lexer.has("L_sqr") ? {type: "L_sqr"} : L_sqr), "array_contents", (lexer.has("R_sqr") ? {type: "R_sqr"} : R_sqr), "append_element"]},
    {"name": "array_contents", "symbols": []},
    {"name": "append_element", "symbols": [(lexer.has("comma") ? {type: "comma"} : comma), "array_contents"]},
    {"name": "append_element", "symbols": []},
    {"name": "void_declare", "symbols": [(lexer.has("void_word") ? {type: "void_word"} : void_word), (lexer.has("id") ? {type: "id"} : id), "function_dec"]},
    {"name": "function_dec", "symbols": ["paren_wrapper", (lexer.has("L_curl") ? {type: "L_curl"} : L_curl), "statement", (lexer.has("R_curl") ? {type: "R_curl"} : R_curl)]},
    {"name": "function_call", "symbols": ["paren_wrapper"]},
    {"name": "paren_wrapper", "symbols": [(lexer.has("L_paren") ? {type: "L_paren"} : L_paren), "paren_content", (lexer.has("R_paren") ? {type: "R_paren"} : R_paren)]},
    {"name": "paren_content", "symbols": ["expressions", "paren_content_append"]},
    {"name": "paren_content", "symbols": []},
    {"name": "paren_content_append", "symbols": [(lexer.has("comma") ? {type: "comma"} : comma), "paren_content"]},
    {"name": "paren_content_append", "symbols": []},
    {"name": "return_statement", "symbols": [(lexer.has("return_word") ? {type: "return_word"} : return_word), "return_content"]},
    {"name": "return_content", "symbols": ["data_nonfunction", (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "return_content", "symbols": ["paren_wrapper", (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "return_content", "symbols": [(lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "loop_statement", "symbols": [(lexer.has("during") ? {type: "during"} : during), (lexer.has("L_paren") ? {type: "L_paren"} : L_paren), "cond_loop", (lexer.has("R_paren") ? {type: "R_paren"} : R_paren), "loopstmt_choices"]},
    {"name": "loop_statement", "symbols": [(lexer.has("cycle") ? {type: "cycle"} : cycle), (lexer.has("L_paren") ? {type: "L_paren"} : L_paren), "cycle_condition", (lexer.has("R_paren") ? {type: "R_paren"} : R_paren), "loopstmt_choices"]},
    {"name": "loopstmt_choices", "symbols": [(lexer.has("L_curl") ? {type: "L_curl"} : L_curl), "statement", (lexer.has("R_curl") ? {type: "R_curl"} : R_curl)]},
    {"name": "cycle_condition", "symbols": ["init_loop", "cond_loop", "unary_statement"]},
    {"name": "init_loop", "symbols": ["data_id", (lexer.has("assign_only_op") ? {type: "assign_only_op"} : assign_only_op), "data_nonfunction", (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "init_loop", "symbols": []},
    {"name": "cond_loop", "symbols": []},
    {"name": "unary_statement", "symbols": [(lexer.has("id") ? {type: "id"} : id), (lexer.has("unary") ? {type: "unary"} : unary)]},
    {"name": "expression", "symbols": ["num_expr"]},
    {"name": "expression", "symbols": ["bool_expr"]},
    {"name": "num_expr", "symbols": ["num_operand", "additional_num"]},
    {"name": "num_expr", "symbols": [(lexer.has("L_paren") ? {type: "L_paren"} : L_paren), "num_operand", "additional_num", (lexer.has("R_paren") ? {type: "R_paren"} : R_paren)]},
    {"name": "num_operand", "symbols": ["ids"]},
    {"name": "num_operand", "symbols": ["num_literals"]},
    {"name": "num_operand", "symbols": ["num_expr"]},
    {"name": "additional_num", "symbols": ["cond_operator", "num_operand", "additional_num"]},
    {"name": "additional_num", "symbols": []},
    {"name": "cond_operator", "symbols": [(lexer.has("arith_op") ? {type: "arith_op"} : arith_op)]},
    {"name": "cond_operator", "symbols": [(lexer.has("add_op") ? {type: "add_op"} : add_op)]},
    {"name": "cond_operator", "symbols": [(lexer.has("relate_op") ? {type: "relate_op"} : relate_op)]},
    {"name": "bool_expr", "symbols": ["bool_operand", "additional_bool"]},
    {"name": "bool_expr", "symbols": [(lexer.has("L_paren") ? {type: "L_paren"} : L_paren), "bool_operand", "additional_bool", (lexer.has("R_paren") ? {type: "R_paren"} : R_paren)]},
    {"name": "bool_operand", "symbols": ["ids"]},
    {"name": "bool_operand", "symbols": [(lexer.has("bool_lit") ? {type: "bool_lit"} : bool_lit)]},
    {"name": "additional_bool", "symbols": []},
    {"name": "additional_bool", "symbols": ["bool_op", "bool_operand", "additional_bool"]},
    {"name": "bool_op", "symbols": [(lexer.has("relate_op_bool") ? {type: "relate_op_bool"} : relate_op_bool)]},
    {"name": "bool_op", "symbols": [(lexer.has("or_op") ? {type: "or_op"} : or_op)]},
    {"name": "bool_op", "symbols": [(lexer.has("and_op") ? {type: "and_op"} : and_op)]},
    {"name": "ids", "symbols": [(lexer.has("id") ? {type: "id"} : id), "id_choices"]},
    {"name": "id_choices", "symbols": ["arrIndex", "object_yes"]},
    {"name": "id_choices", "symbols": [(lexer.has("period") ? {type: "period"} : period), "obj_prop"]},
    {"name": "id_choices", "symbols": ["function_call"]},
    {"name": "object_yes", "symbols": [(lexer.has("period") ? {type: "period"} : period), "obj_prop"]},
    {"name": "object_yes", "symbols": []},
    {"name": "obj_prop", "symbols": [(lexer.has("id") ? {type: "id"} : id), "arrIndex"]},
    {"name": "arrIndex", "symbols": []},
    {"name": "arrIndex", "symbols": [(lexer.has("L_sqr") ? {type: "L_sqr"} : L_sqr), (lexer.has("num_lit") ? {type: "num_lit"} : num_lit), (lexer.has("R_sqr") ? {type: "R_sqr"} : R_sqr), "arr2D"]},
    {"name": "arr2D", "symbols": []},
    {"name": "arr2D", "symbols": [(lexer.has("L_sqr") ? {type: "L_sqr"} : L_sqr), (lexer.has("num_lit") ? {type: "num_lit"} : num_lit), (lexer.has("R_sqr") ? {type: "R_sqr"} : R_sqr), "arr2D"]}
]
  , ParserStart: "program"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
